{"version":3,"file":"static/js/404.adf15e62.chunk.js","mappings":"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","sources":["../node_modules/@tanstack/query-core/src/queryObserver.ts","../node_modules/@tanstack/react-query/src/useSyncExternalStore.ts","../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../node_modules/@tanstack/react-query/src/isRestoring.tsx","../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../node_modules/@tanstack/react-query/src/utils.ts","../node_modules/@tanstack/react-query/src/suspense.ts","../node_modules/@tanstack/react-query/src/useQuery.ts","../node_modules/@tanstack/react-query/src/useBaseQuery.ts"],"sourcesContent":["import type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","'use client'\n// Temporary workaround due to an issue with react-native uSES - https://github.com/TanStack/query/pull/3601\nimport { useSyncExternalStore as uSES } from 'use-sync-external-store/shim/index.js'\n\nexport const useSyncExternalStore = uSES\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","'use client'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  UseErrorBoundary,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  useErrorBoundary,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  useErrorBoundary: UseErrorBoundary<\n    TQueryFnData,\n    TError,\n    TQueryData,\n    TQueryKey\n  >\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(useErrorBoundary, [result.error, query])\n  )\n}\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  return !!_useErrorBoundary\n}\n","import type { DefaultedQueryObserverOptions } from '@tanstack/query-core'\nimport type { QueryObserver } from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport type { QueryObserverResult } from '@tanstack/query-core'\nimport type { QueryKey } from '@tanstack/query-core'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => defaultedOptions?.suspense && willFetch(result, isRestoring)\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer\n    .fetchOptimistic(defaultedOptions)\n    .then(({ data }) => {\n      defaultedOptions.onSuccess?.(data as TData)\n      defaultedOptions.onSettled?.(data, null)\n    })\n    .catch((error) => {\n      errorResetBoundary.clearReset()\n      defaultedOptions.onError?.(error)\n      defaultedOptions.onSettled?.(undefined, error)\n    })\n","'use client'\nimport type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport { parseQueryArgs, QueryObserver } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","'use client'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryObserver } from '@tanstack/query-core'\nimport { notifyManager } from '@tanstack/query-core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseBaseQueryOptions } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { ensureStaleTime, shouldSuspend, fetchOptimistic } from './suspense'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  ensureStaleTime(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange))\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: defaultedOptions.useErrorBoundary,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n"],"names":["QueryObserver","_Subscribable","_inherits","_super","_createSuper","client","options","_this","_classCallCheck","call","trackedProps","Set","selectError","bindMethods","setOptions","_createClass","key","value","this","remove","bind","refetch","listeners","size","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","hasListeners","destroy","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","shallowEqualObjects","getQueryCache","notify","type","query","observer","enabled","Error","queryKey","updateQuery","mounted","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","build","createResult","currentResult","result","_this2","trackedResult","Object","keys","forEach","defineProperty","configurable","enumerable","get","add","_ref","arguments","length","undefined","refetchPage","_objectWithoutProperties","_excluded","fetch","_objectSpread","meta","_this3","defaultedOptions","isFetchingOptimistic","then","fetchOptions","_fetchOptions$cancelR","_this4","cancelRefetch","promise","throwOnError","catch","noop","_this5","isServer","isStale","isValidTimeout","timeout","timeUntilStale","dataUpdatedAt","staleTimeoutId","setTimeout","_this$options$refetch","refetchInterval","data","nextInterval","_this6","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","state","currentQueryInitialState","prevQueryResult","previousQueryResult","error","errorUpdatedAt","fetchStatus","status","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","canFetch","networkMode","keepPreviousData","isSuccess","select","selectFn","selectResult","replaceData","process","placeholderData","Date","now","isFetching","isLoading","isError","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","_this7","nextResult","defaultNotifyOptions","cache","notifyOnChangeProps","includedProps","useErrorBoundary","some","typedKey","has","shouldNotifyListeners","action","onSuccess","manual","isCancelledError","onError","_this8","notifyManager","batch","_this$options$onSucce","_this$options","_this$options$onSettl","_this$options2","onSettled","_this$options$onError","_this$options3","_this$options$onSettl2","_this$options4","_ref2","listener","Subscribable","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","isStaleByTime","useSyncExternalStore","useSyncExternalStore$1","createValue","clearReset","isReset","reset","QueryErrorResetBoundaryContext","React","useQueryErrorResetBoundary","IsRestoringContext","useIsRestoring","Provider","errorResetBoundary","useClearResetErrorBoundary","getHasError","_useErrorBoundary","params","apply","_toConsumableArray","ensureStaleTime","shouldSuspend","isRestoring","willFetch","fetchOptimistic","useQuery","arg1","arg2","arg3","Observer","ensurePreventErrorBoundaryRetry","_React$useState","queryClient","_slicedToArray","getOptimisticResult","onStoreChange","unsubscribe","subscribe","batchCalls","getCurrentResult","trackResult","useBaseQuery"],"sourceRoot":""}