{"version":3,"file":"static/js/108.1523494e.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@tanstack/query-core/src/queryObserver.ts","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@tanstack/react-query/src/useSyncExternalStore.ts","../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../node_modules/@tanstack/react-query/src/isRestoring.tsx","../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../node_modules/@tanstack/react-query/src/utils.ts","../node_modules/@tanstack/react-query/src/suspense.ts","../node_modules/@tanstack/react-query/src/useQuery.ts","../node_modules/@tanstack/react-query/src/useBaseQuery.ts"],"sourcesContent":["export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Action, FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result, options)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult everytime\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.currentResult = result\n      this.currentResultOptions = this.options\n      this.currentResultState = this.currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.trackedProps,\n      )\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n) {\n  // it is important to keep this condition like this for three reasons:\n  // 1. It will get removed in the v5\n  // 2. it reads: don't update the properties if we want to keep the previous\n  // data.\n  // 3. The opposite condition (!options.keepPreviousData) would fallthrough\n  // and will result in a bad decision\n  if (options.keepPreviousData) {\n    return false\n  }\n\n  // this means we want to put some placeholder data when pending and queryKey\n  // changed.\n  if (options.placeholderData !== undefined) {\n    // re-assign properties only if current data is placeholder data\n    // which means that data did not arrive yet, so, if there is some cached data\n    // we need to \"prepare\" to receive it\n    return optimisticResult.isPlaceholderData\n  }\n\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","'use client'\n// Temporary workaround due to an issue with react-native uSES - https://github.com/TanStack/query/pull/3601\nimport { useSyncExternalStore as uSES } from 'use-sync-external-store/shim/index.js'\n\nexport const useSyncExternalStore = uSES\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  UseErrorBoundary,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  useErrorBoundary,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  useErrorBoundary: UseErrorBoundary<\n    TQueryFnData,\n    TError,\n    TQueryData,\n    TQueryKey\n  >\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(useErrorBoundary, [result.error, query])\n  )\n}\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  return !!_useErrorBoundary\n}\n","import type { DefaultedQueryObserverOptions } from '@tanstack/query-core'\nimport type { QueryObserver } from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport type { QueryObserverResult } from '@tanstack/query-core'\nimport type { QueryKey } from '@tanstack/query-core'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => defaultedOptions?.suspense && willFetch(result, isRestoring)\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer\n    .fetchOptimistic(defaultedOptions)\n    .then(({ data }) => {\n      defaultedOptions.onSuccess?.(data as TData)\n      defaultedOptions.onSettled?.(data, null)\n    })\n    .catch((error) => {\n      errorResetBoundary.clearReset()\n      defaultedOptions.onError?.(error)\n      defaultedOptions.onSettled?.(undefined, error)\n    })\n","'use client'\nimport { QueryObserver, parseQueryArgs } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","'use client'\nimport * as React from 'react'\n\nimport { notifyManager } from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { ensureStaleTime, fetchOptimistic, shouldSuspend } from './suspense'\nimport type { QueryKey, QueryObserver } from '@tanstack/query-core'\nimport type { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  ensureStaleTime(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange))\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: defaultedOptions.useErrorBoundary,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n"],"names":["_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","QueryObserver","_Subscribable","_inherits","_super","_createSuper","client","options","_this","_classCallCheck","call","trackedProps","Set","selectError","bindMethods","setOptions","_createClass","value","this","remove","bind","refetch","listeners","size","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","hasListeners","destroy","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","shallowEqualObjects","getQueryCache","notify","type","query","observer","enabled","Error","queryKey","updateQuery","mounted","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","build","result","createResult","optimisticResult","keepPreviousData","undefined","placeholderData","isPlaceholderData","getCurrentResult","shouldAssignObserverCurrentProperties","currentResult","currentResultOptions","currentResultState","state","_this2","trackedResult","forEach","defineProperty","configurable","enumerable","get","add","_ref","arguments","refetchPage","objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","_objectWithoutProperties","_excluded","fetch","_objectSpread","meta","_this3","defaultedOptions","isFetchingOptimistic","then","fetchOptions","_fetchOptions$cancelR","_this4","cancelRefetch","promise","throwOnError","catch","noop","_this5","isServer","isStale","isValidTimeout","timeout","timeUntilStale","dataUpdatedAt","staleTimeoutId","setTimeout","_this$options$refetch","refetchInterval","data","nextInterval","_this6","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","clearInterval","prevResult","prevResultState","prevResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","error","errorUpdatedAt","fetchStatus","status","isPreviousData","_optimisticResults","fetchOnMount","fetchOptionally","canFetch","networkMode","isSuccess","select","selectFn","selectResult","replaceData","process","Date","now","isFetching","isLoading","isError","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","_this7","nextResult","defaultNotifyOptions","cache","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","useErrorBoundary","some","typedKey","has","shouldNotifyListeners","action","onSuccess","manual","isCancelledError","onError","_this8","notifyManager","batch","_this$options$onSucce","_this$options","_this$options$onSettl","_this$options2","onSettled","_this$options$onError","_this$options3","_this$options$onSettl2","_this$options4","_ref2","listener","Subscribable","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","isStaleByTime","useSyncExternalStore","useSyncExternalStore$1","createValue","clearReset","isReset","reset","QueryErrorResetBoundaryContext","React","useQueryErrorResetBoundary","IsRestoringContext","useIsRestoring","Provider","errorResetBoundary","useClearResetErrorBoundary","getHasError","_useErrorBoundary","params","apply","_toConsumableArray","ensureStaleTime","shouldSuspend","isRestoring","willFetch","fetchOptimistic","useQuery","arg1","arg2","arg3","Observer","ensurePreventErrorBoundaryRetry","_React$useState","queryClient","_slicedToArray","getOptimisticResult","onStoreChange","unsubscribe","subscribe","batchCalls","trackResult","useBaseQuery"],"sourceRoot":""}